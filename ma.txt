#!/bin/bash

ERROR() { echo "==> Error: $1" ; }
WARN()  { echo "==> Warning: $1" ; }
INFO()  { echo "==> Info: $1" ; }
Check() {
    if ! RunCmd "$@" ; then
        ERROR "'$*' failed"
        exit 0
    fi
}
CheckWithWarning() {
    if ! RunCmd "$@" ; then
        WARN "'$*' failed"
    fi
}
RunCmd() {
    echo "::" "$@"
    "$@"
}

BashrcConfig() {
    [ -n "$new_user" ] || return

    cat <<EOF >> $home/.bashrc

# Aliases

alias branch='pacman-conf --repo-list | grep "^testing$" || echo stable'
alias cls=clear
alias cp='cp -i'
alias df='df -hT'
alias inxi='inxi -z'
alias ln='ln -i'
alias lsblk='lsblk -f -o+SIZE'
alias meld='setsid meld-rcs'
alias mv='mv -i'
alias nano='nano -l'
alias p=pacman-ext
alias pa='paru -Sua'
alias pd='pacman-ext --downgrade'
alias pacdiff=eos-pacdiff
alias poweroff='sync && poweroff'
alias reboot='sync && reboot'
alias rm='rm -i'
alias sou='source ~/.bashrc'               # re-read ~/.bashrc

# alias grep='grep -n'

# Key bindings and CLI features

bind '"\e[A":history-search-backward'      # history with arrow up key
bind '"\e[B":history-search-forward'       # history with arrow down key
bind 'set show-all-if-ambiguous on'        # complete with single TAB
bind 'set mark-symlinked-directories on'   # complete directory symlinks with slash

# Variables

export FUNCNEST=50                         # prevent bad loops!
export HISTCONTROL="erasedups"
export PROMPT_COMMAND=_bash_prompt_command
# export LESS="-Rn"

# Functions

_bash_prompt_command() {
    local datetime=\$(LANG=C /usr/bin/date "+%d.%m.%y %H:%M:%S")
    export PS1="\$datetime\n\w> "
}

_fork_run() { setsid /usr/bin/"\${FUNCNAME[1]}" "\$@" >& /dev/null ; }
_sync_run() { /usr/bin/"\${FUNCNAME[1]}" "\$@" ; sync ; }

# emacs()                     { _fork_run --reverse-video "\$@" ; }
firefox-developer-edition() { _fork_run "\$@" ; }
firefox()                   { _fork_run "\$@" ; }
gitk()                      { _fork_run "\$@" ; }
librewolf()                 { _fork_run "\$@" ; }
vivaldi-stable()            { _fork_run "\$@" ; }

paru()  { _sync_run "\$@" ; }
yay()   { _sync_run "\$@" ; }

curl() {
    local code=0
    command curl --fail "\$@"
    code=\$?
    if [ \$code -ne 0 ] ; then
        curl-exit-code-to-string \$code
    fi
    return \$code
}

type() {
    # without parameters, show all aliases and functions
    case "\$1" in
        "") { alias && declare -F ; } | less ;;
        *) builtin type -a "\$@" ;;
    esac
}

paccache() {
    # 1. check if sudo is needed
    # 2. be verbose always

    local sudo=no
    local verbose=0
    local arg

    for arg in "\$@" ; do
        case "\$arg" in
            --move | --remove) sudo=yes ;;
            --verbose) ((verbose++)) ;;
            --*) ;;
            -*m* | -*r*) sudo=yes ;;
            -*v*) ((verbose++)) ;;
        esac
    done
    if [ \$verbose -eq 0 ] ; then
        verbose="--verbose"
    else
        verbose=""
    fi
    if [ "\$sudo" = "yes" ] ; then
        sudo /usr/bin/paccache \$verbose "\$@"
    else
        /usr/bin/paccache \$verbose "\$@"
    fi
}

_set_terminal_window_title()  { printf "\e]0;%s\a" "\$*" ; }

MyTermTitle() {
    if [ -z "\$_CURRENT_KERNEL" ] ; then
        _CURRENT_KERNEL=\$(cat /proc/cmdline | sed 's|^BOOT_IMAGE=.*vmlinuz-\([^ ]*\) .*|\1|')
    fi
    local latest_command="\$(history 1 | sed 's|^[ ]*[0-9]*[ ]*||')"
    [ "\$latest_command" = "\$_latest_command_previous" ] && return
    latest_command="\$_CURRENT_KERNEL: \$latest_command"
    _latest_command_previous="\$latest_command"
    _set_terminal_window_title "\$latest_command"
}

# Set terminal title to the currently running terminal:
trap "MyTermTitle" DEBUG

EOF
    chown $new_user:$new_user $home/.bashrc    # not really needed if it already exists
}

EmacsConfig() {
    [ -n "$new_user" ] || return
    [ -x /usr/bin/emacs ] || return

    cat <<EOF > $home/.emacs
(custom-set-variables
 ;; custom-set-variables was added by Custom.
 ;; If you edit it by hand, you could mess it up, so be careful.
 ;; Your init file should contain only one such instance.
 ;; If there is more than one, they won't work right.
 '(c-guess-guessed-basic-offset 2 t)
 '(column-number-mode t)
 '(cua-mode t nil (cua-base))
 '(gdb-many-windows t)
 '(global-display-line-numbers-mode t)
 '(indent-tabs-mode nil)
 '(inhibit-startup-screen t)
 '(make-backup-files nil)
 '(next-line-add-newlines nil)
 '(package-selected-packages '(realgud))
 '(require-final-newline t)
 '(scroll-step 1)
 '(select-enable-clipboard t)
 '(tool-bar-mode nil)
 '(tool-bar-position 'right)
 '(vc-follow-symlinks t)
 '(x-select-enable-clipboard-manager nil))
EOF
    chown $new_user:$new_user $home/.emacs
}

GetNewUserName() {
    if [ -z "$new_user" ] ; then
        if [ -r /tmp/new_username.txt ] ; then
            new_user=$(cat /tmp/new_username.txt)
        else
            ERROR "new username not found. You can use command: $0 'your-username'"
        fi
    else
        echo "new_user already set to '$new_user'"
    fi
}

OtherConfig() {
    local file="$home/.config/autostart/Terminal-at-start.desktop"

    cat <<EOF > "$file"
[Desktop Entry]
Encoding=UTF-8
Version=0.9.4
Type=Application
Name=Terminal at start
Comment=
Exec=xfce4-terminal
OnlyShowIn=XFCE;
RunHook=0
StartupNotify=false
Terminal=false
Hidden=false
EOF
    CheckWithWarning chown "$new_user:$new_user" "$file"

    case "$this_rig" in
        l1)
            file="$home/.config/autostart/Xbacklight.desktop"
            cat <<EOF > "$file"
[Desktop Entry]
Version=1.0
Type=Application
Name=Xbacklight
Comment=
Exec=xbacklight =30
Icon=
Path=
Terminal=false
StartupNotify=false
EOF
            CheckWithWarning chown "$new_user:$new_user" "$file"
            ;;
    esac

    # prevent Logitech mouse wakeup from suspend
    echo <<EOF > /etc/udev/rules.d/logitech-unifying.rules
ACTION=="add", SUBSYSTEM=="usb", DRIVERS=="usb", ATTRS{idVendor}=="046d", ATTRS{idProduct}=="c52b", ATTR{power/wakeup}="disabled"
EOF
}

HomeSettings() {
    # Add here some user specific stuff!
    if [ -n "$new_user" ] && [ -d $home ] ; then
        EmacsConfig
        BashrcConfig
        OtherConfig
    else
        ERROR "$FUNCNAME failed!"
    fi  
}

InstallPackages() {
    local Install=(   # packages to install
        atril
        emacs
        firefox-developer-edition
        gparted
        # kaffeine
        libreoffice-fresh
        libreoffice-fresh-fi
        linux-lts
        linux-lts-headers
        # llpp            # fast PDF reader for complex PDF files    # not supported anymore :(
        most
        mpv
        ncdu
        pahis
        paru
        rcs
        simple-scan
        solaar
        terminator

        # m-aur
        vscodium-bin

        # m-m
        abbrevs-ls
        abbrevs-misc
        dvb-mn88473
        emacs-tweaks
        grub-mkconfig-reminder-after-kernel
        grub_os-prober_fix
        hlp
        m-common
        md
        meld-rcs
        pacman-ext
        pactree-bash-completion
        vb-notif
    )
    Install+=(gufw)    # pacman -Q firewalld >& /dev/null || Install+=(gufw)

    Check pacman -Sy
    Check pacman -S --noconfirm --needed "${Install[@]}"
}

RemovePackages() {
    Remove=(    # packages to remove
        file-roller
        firewalld
        glances
        parole
        power-profiles-daemon
        xfce4-netload-plugin
        xfce4-weather-plugin
    )
    local remove=()
    local pkg

    case "$this_rig" in
        v1 | p1) Remove+=(bluez-tools gnome-bluetooth ) ;;
    esac

    for pkg in "${Remove[@]}" ; do
        if pacman -Q $pkg >& /dev/null ; then
            remove+=($pkg)
        fi
    done
    if [ ${#remove[0]} -gt 0 ] ; then
        INFO "Removing packages: ${remove[*]}"
        # Don't exit if uninstall fails (because of dependencies...)
        CheckWithWarning pacman -Rsn --noconfirm "${remove[@]}" || true
    fi
}

AddRepos() {
    local reponames=(
        m-m
        m-aur
        m-more2
    )
    local mirrorlist_pkg="mirrorlist-m"
    local mirrorlist_file="mirrorlist-m"
    local mirrorlist_file_url="https://github.com/manuel-192/m-m/raw/master/PKGBUILDs/$mirrorlist_pkg/$mirrorlist_file"
    local repo_gpg_key="A1F1B5187D25904B"
    local siglevel=Required

    Setup3rdPartyRepos "$mirrorlist_pkg" \
                       "$mirrorlist_file" \
                       "$mirrorlist_file_url" \
                       "$repo_gpg_key" \
                       "$siglevel" \
                       "${reponames[@]}"
}

Setup3rdPartyRepos() {
    local mirrorlist_pkg="$1"
    local mirrorlist_file="$2"
    local mirrorlist_file_url="$3"
    local repo_gpg_key="$4"
    local siglevel="$5"

    shift 5

    # tail is repo name(s), must have at least 1
    [ -n "$1" ] || Check false

    local reponame
    local repo_added=no
    local key_added="$(pacman-key --list-keys 2>/dev/null | grep -w "$repo_gpg_key")"
    local need_mirrorlist_pkg=no

    if [ -z "$key_added" ] ; then
        Check pacman-key --keyserver hkps://keyserver.ubuntu.com --recv-keys "$repo_gpg_key"
        INFO "pacman-key: key received"
        Check pacman-key --lsign-key "$repo_gpg_key"
        INFO "pacman-key: key signed"
    fi

    if ! pacman -Q "$mirrorlist_pkg" >& /dev/null  ; then
        Check wget -O "/etc/pacman.d/$mirrorlist_file" "$mirrorlist_file_url"
        INFO "File $mirrorlist_file fetched"
        need_mirrorlist_pkg=yes
    fi

    for reponame in "$@" ; do
        if [ -z "$(grep "^\[$reponame\]$" $pacmanconf )" ] ; then
            cat <<EOF >> "$pacmanconf"

[$reponame]
Include = /etc/pacman.d/$mirrorlist_file
EOF
            [ -n "$siglevel" ] && echo "SigLevel = $siglevel" >> "$pacmanconf"
            repo_added=yes
            INFO "Repository [$reponame] was added to $pacmanconf."
        else
            INFO "[$reponame] is already set up in $pacmanconf."
        fi
    done
    if [ "$repo_added" = "yes" ] ; then
        Check pacman -Sy
    fi
    if [ "$need_mirrorlist_pkg" = "yes" ] ; then
        Check pacman --overwrite "/etc/pacman.d/$mirrorlist_file" -Sy --noconfirm "$mirrorlist_pkg"
    fi
}

GrubDefaults() {
    sed -i /etc/default/grub \
        -e '/^GRUB_DEFAULT=.*/i \GRUB_TOP_LEVEL=/boot/vmlinuz-linux'
    update_grub=yes
}

Blacklist() {
    local blacklists="$1"

    # handle both quoting styles
    sed -i /etc/default/grub \
        -e "s|^\(GRUB_CMDLINE_LINUX_DEFAULT=\"\)|\1module_blacklist=$blacklists |" \
        -e "s|^\(GRUB_CMDLINE_LINUX_DEFAULT='\)|\1module_blacklist=$blacklists |"
    update_grub=yes
}

ThisRig() {
    if [ -n "$(echo "$graphics" | grep "8086:0046")" ] && [ -n "$(echo "$graphics" | grep "10de:0a2b")" ] ; then
        this_rig=l1   # vanha
    elif [ -n "$(echo "$graphics" | grep "8086:5917")" ] && [ -n "$(echo "$graphics" | grep "1002:6660")" ] ; then
        this_rig=l2   # uudempi
    elif [ -n "$(echo "$graphics" | grep "10de:1d01")" ] ; then
        this_rig=p1
    elif [ -n "$(echo "$graphics" | grep "15ad:0405")" ] ; then
        this_rig=v1
    fi
}

DriverSettings() {
    case "$this_rig" in
        l1) Blacklist nouveau
            GrubDefaults
            Check pacman -S --needed --noconfirm xf86-video-intel xorg-xbacklight
            ;;
        l2) Blacklist radeon,amdgpu
            GrubDefaults
            Check pacman -S --needed --noconfirm xf86-video-intel xorg-xbacklight
            ;;
        p1) Blacklist nouveau,i915
            GrubDefaults
            ;;
        v1) GrubDefaults
            ;;
    esac
}

SystemSettings() {
    sed -i /etc/eos-script-lib-yad.conf \
        -e 's|^\(EOS_PACDIFF_WARNING\)=.*|\1=no|' \
        -e 's|^\(SyncAfterUpdate\)=.*|\1=yes|'

    sed -i /etc/eos-rankmirrors.conf \
        -e 's|^\(EOS_AUTORANK_TIMEOUT\)=.*|\1=2|' \
        -e "s|^\(ALWAYS_FIRST_EOS_MIRRORS\)=.*|\1='alpix\|moson\|umu'|"
}

SetRepoTypes() {
    case "$repotype" in
        testing)
            sed -i $pacmanconf \
                -e 's|^#\(\[testing\]\)$|\1|' \
                -e 's|^#\(\[community-testing\]\)$|\1|' \
                -e 's|^#\(\[multilib-testing\]\)$|\1|' \
                -e 's|^#\(Include = \)$|\1|'
            ;;
    esac
}

FixMirrorlists() {
    cat <<EOF > /etc/pacman.d/mirrorlist
Server = https://mirror.pseudoform.org/\$repo/os/\$arch
Server = https://mirror.f4st.host/archlinux/\$repo/os/\$arch
Server = https://mirror.moson.org/arch/\$repo/os/\$arch
Server = https://archlinux.thaller.ws/\$repo/os/\$arch
EOF

    if false ; then
    cat <<EOF > /etc/pacman.d/endeavouros-mirrorlist
Server = https://mirror.alpix.eu/endeavouros/repo/\$repo/\$arch
Server = https://mirror.moson.org/endeavouros/repo/\$repo/\$arch
Server = https://ftp.acc.umu.se/mirror/endeavouros/repo/\$repo/\$arch
EOF
    fi
}

Lspci() {
    lspci=$(lspci -vnn)
    graphics=$(echo "$lspci" | grep -Pw 'VGA|Display|3D')
    echo ":: graphics = '$graphics'"
}

Services() {
    local xx

    sleep 1

    # enable ufw firewall service
    for xx in ufw ; do
        if pacman -Q $xx >& /dev/null ; then
            RunCmd systemctl enable $xx
        fi
    done
}

GrubSettings() {
    cat <<EOF >> /boot/grub/custom.cfg

menuentry 'Shutdown' { halt ; }
menuentry 'Restart'  { reboot ; }
EOF
    update_grub=yes

    if [ "$update_grub" = "yes" ] ; then
        RunCmd grub-mkconfig -o /boot/grub/grub.cfg
    fi
}

CleanUp() {
    local files_to_delete=(
        /etc/pacman.d/mirrorlist.pacnew
        /etc/pacman.d/endeavouros-mirrorlist.pacnew
        /etc/default/grub.pacnew
    )
    RunCmd rm -f "${files_to_delete[@]}"
}

StartStop() {
    INFO "Executing $*: started."
    "$@"
    INFO "Executing $*: done."
}

Main() {
    INFO "Executing user commands: started."

    local new_user="$1"
    StartStop  GetNewUserName
    local home="/home/$new_user"
    local update_grub=no
    local lspci=""
    local graphics=""
    local this_rig=""
    local pacmanconf=/etc/pacman.conf
    local repotype=stable    # stable or testing

    StartStop Lspci

    StartStop SetRepoTypes

    StartStop ThisRig

    StartStop AddRepos

    StartStop FixMirrorlists

    StartStop RemovePackages
    StartStop InstallPackages
    StartStop Services

    StartStop DriverSettings
    StartStop SystemSettings
    StartStop HomeSettings    # modify some dotfiles at $HOME
    StartStop GrubSettings

    StartStop CleanUp

    INFO "Executing user commands: done."
}

Main "$@"
