#!/bin/bash

# Some convenient bash settings.

SettingsCommon()
{
    [ $_COMMON_SETTINGS_VERBOSE = yes ] && echo "==> $FUNCNAME" >&2
    case "$-" in
        *i*)
            # history commands with arrow keys (on an interactive shell)
            bind '"\e[A":history-search-backward'      # up arrow
            bind '"\e[B":history-search-forward'       # down arrow

            bind 'set show-all-if-ambiguous on'        # complete with single TAB
            bind 'set mark-symlinked-directories on'   # complete directory symlinks with slash
            ;;
    esac
    shopt -s autocd

    

    #############################################################
    # functions
    #############################################################

    sou() {
        source ~/.bashrc  "$@"    # allow parameters to ~/.bashrc :)
    }

    Alias()
    {
        local name="$1"
        local def="$2"
        local force="$3"   # optional, values: "yes" "no" "", "" means "yes"
        local alias="builtin alias"

        [ "$force" = "" ] && force=yes

        if [ -n "$name" ] ; then
            if [ -n "$def" ] ; then
                if [ "$force" = "yes" ] ; then
                    $alias "$name"="$def"    # assign alias only if name is "free"
                    return
                fi
                local defold=$(LANG=C type "$name" 2>/dev/null | head -n1)
                if [ -z "$defold" ] ; then
                    $alias "$name"="$def"    # assign alias only if name is "free"
                    return
                fi
                [ $_COMMON_SETTINGS_VERBOSE_ALIAS = yes ] && echo "Warning: $FUNCNAME: Overriding old definition: '$defold'." >&2
            else
                $alias "$name"
            fi
        else
            $alias
        fi
    }
    AliasIf() {
        # make alias only if the app is available
        if type "$1" &>/dev/null ; then
            shift
            Alias "$@"
        else
            [ $_COMMON_SETTINGS_VERBOSE_ALIAS = yes ] && echo "==> $FUNCNAME: sorry, program '$1' not found" >&2
        fi
    }
    Unalias() { unalias "$1" 2>/dev/null ; }

    sudofuncs() {
        local tmpfile=$(mktemp)
        local name
        for name in "$@" ; do
            echo "$name() { sudo /usr/bin/$name \"\$@\" ; }" >> $tmpfile
        done
        source $tmpfile
        rm -f $tmpfile
    }


    Unalias type
    type() {
        # without parameters, show all aliases and functions
        case "$1" in
            "") { alias && declare -F ; } | less ;;
            *) builtin type -a "$@" ;;
        esac
    }

    -() { cd - ; }   # make plain - the same as "cd -"

    ..()
    {
        # cd to one of the parent folders, given number of levels (zero or more)
        # Example: .. 5

        local levels="$1"
        local -r levels_max=10000
        case "$levels" in
            "")
                levels=1
                ;;
            # [0-9] | [1-9]*([0-9]))     # assumes extglob is enabled! Note: emacs reformatting fails with this...
            #     ;;
            [0-9] | [1-9][0-9])
                if [ $levels -gt $levels_max ] ; then
                    echo "number of levels '$levels' must be less than $levels_max" >&2
                    return 1
                fi
                ;;
            *)
                echo "invalid number of levels: '$levels'" >&2
                return 1
                ;;
        esac
        local dir=$(seq $levels | awk '{printf "../"}')
        cd $dir
    }

    open-anything() { setsid exo-open "$@" 2>/dev/null ; }      # open any file (based on mime stuff)

    ncd() {
        case "$1" in
            --init)
                shopt -q cdable_vars && complete -v -F _cd -o nospace $FUNCNAME || complete -F _cd -o nospace $FUNCNAME
                ;;
            *)
                builtin cd "$(cd-extended "$@")"
                ;;
        esac
    }
    ncd --init

    lsd()   { find . -type d -exec ls -ld {} \; ; }
    drw()   {
        # shellcheck disable=SC2010
        ls -l "$@" | grep rw
    }

    lsblk() {
        local width=300
        local lsblk="/usr/bin/lsblk -w$width"

        if [ -z "$1" ] ; then
            $lsblk -f -o+SIZE
        else
            $lsblk "$@"
        fi
    }

    BannerLine() {
        local str="$1"
        local len="$2"
        [ -n "$len" ] || len=$((COLUMNS / 2))
        [ -n "$str" ] || str="="
        printf "%.0s$str" $(seq $len)
        echo ""
    }

    my_prompt_command() {
        # Show two line prompt (folder, time) after trying to slightly shorten the folder name.

        local pwd=${PWD/$HOME/\~}                                         # shorten for $HOME

        if [ ${#pwd} -gt $((COLUMNS / 2)) ] ; then
            printf -v PS1 "{%s}\n%s > " "$pwd" "$(date +%a\ %H:%M.%S)"  # two line prompt
        else
            printf -v PS1 "%11s %s > " "$(date +%a\ %H:%M.%S)" "$pwd"   # one line prompt
        fi
    }

    #Unalias df
    #df() { /usr/bin/df -hT "$@" | awk '{print $1,$2,$3,$5,$6,$7,$8,$9}' | column -t -R3,4,5 ; }

    sudofuncs fstrim mount umount


    #############################################################
    # variables
    #############################################################

    [ -z "$FUNCNEST" ] && export FUNCNEST=100

    PROMPT_COMMAND=(my_prompt_command)

    export HISTCONTROL="erasedups"
    FIGNORE=".o:~"                      # ignored suffixes in filename completion

    CDPATH="${CDPATH_ARR[*]}"
    CDPATH="${CDPATH// /:}"

    #############################################################
    # aliases
    #############################################################

    [ $_COMMON_SETTINGS_VERBOSE = yes ] && echo "==> $FUNCNAME: aliases" >&2

    Alias bat            "bat -n"
    Alias branch         "pacman-conf --repo-list | grep '^testing$' || echo stable"
    Alias ci             "ci -u"
    Alias cls            "clear"
    Alias df             "LANG=C df -hT"
    Alias history-del    "history -c && history -w"
    Alias hlp            "eos-apps-info-helper"
    Alias inxi           "inxi -z"
    Alias l              "ls -lav --ignore=.?*"   # show long listing but no hidden dotfiles except "."
    Alias ll             "ls -lav --ignore=.."    # show long listing of all except ".."
    Alias ls             "ls --color=auto"
    Alias meld           "meld-rcs"
    Alias nano           "nano -l"
    Alias o              "open-anything"
    Alias pacdiff        "eos-pacdiff"
    Alias p              "pacman-ext --extras --no-banner --expac"
    Alias paq            "sudo paq"
    Alias poweroff       "sync && poweroff"
    Alias rc             "pkgcheck"
    Alias reboot         "sync && reboot"
    Alias ramsleep       "Power-routines suspend"
    #Alias sou            "source ~/.bashrc"
    Alias welcome        "setsid eos-welcome --once"

    AliasIf grub-mkconfig update-grub "sudo grub-mkconfig -o /boot/grub/grub.cfg"

    if true ; then
        Alias cp         "cp -i"
        Alias ln         "ln -i"
        Alias mv         "mv -i"
        Alias rm         "rm -i"
    fi

    if type logstuff &> /dev/null ; then
        alias reboot='logstuff off && sync && Power-routines reboot'
        alias poweroff='logstuff off && sync && Power-routines poweroff'
    fi

    #############################################################
    # bash completions
    #############################################################

    [ $_COMMON_SETTINGS_VERBOSE = yes ] && echo "==> $FUNCNAME: bash completions" >&2

    LoadCompletion() {
        local cmdname="$1"
        local compname="$2"
        local compfunc="$3"   # optional

        [ -n "$compfunc" ] || compfunc="_${compname}_"

        complete | grep "\-F" | grep " $cmdname$" >/dev/null || {
            # echo "loading $compfunc completion" >&2
            source /usr/share/bash-completion/completions/$compname
            complete -F $compfunc $cmdname
        }
    }

    #              new cmdname          pkgname     completion func
    LoadCompletion pacman-sudo-internal pacman      _pacman
    LoadCompletion p                    pacman-ext  _pacman-ext_
    LoadCompletion rc                   pkgcheck    _pkgcheck_

    NiceFuncRun() {
        local app="$1"
        local firstpara="$2"
        shift

        if [ -x /bin/$app ]; then
            case "$firstpara" in 
                -h | --help*) /bin/$app "$@" 2> /dev/null ;;
                *)            setsid /bin/$app "$@" &> /dev/null ;;
            esac
        else
            command $app
        fi
    }

    AppsToFuncsMaker() {
        local apps=(
            adie                             # lightning fast editor
            # audacity
            # bluefish
            # chromium
            dolphin
            eog
            firefox
            firefox-developer-edition
            # geany
            # gedit
            ghostwriter
            gitk
            # gnome-boxes
            # gnome-builder
            kate
            # kdevelop
            konsole
            libreoffice
            # mousepad
            # notepadqq
            pamac-manager
            parole
            qterminal
            ristretto
            soffice
            terminator
            thunderbird
            xed
            xfce4-screenshooter
            xplayer
            xreader

            # eclipse
            # tkdiff
        )
        apps+=(        # here for other reasons!
            kaffeine
            # krusader
            # vivaldi-stable
        )

        if [ ${#apps[@]} -gt 0 ] ; then
            local pr
            local tmpfile=$(mktemp)

            for pr in "${apps[@]}" ; do
                Unalias $pr
                which $pr &> /dev/null && echo "$pr() { NiceFuncRun $pr \"\$@\" ; }"
            done >> $tmpfile

            # shellcheck disable=SC1090
            source $tmpfile
            rm -f $tmpfile
        fi
    }
    AppsToFuncsMaker
    unset -f AppsToFuncsMaker
}

_COMMON_SETTINGS_VERBOSE=no           # common verbosity
_COMMON_SETTINGS_VERBOSE_ALIAS=no     # verbosity specific to Alias()

case "$1" in
    --verbose)       _COMMON_SETTINGS_VERBOSE=yes ;;
    --verbose-alias) _COMMON_SETTINGS_VERBOSE_ALIAS=yes ;;
esac

source $HOME/.config/cd-extended.conf && SettingsCommon
