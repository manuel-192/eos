#!/bin/bash

# Some convenient bash settings.

NextInfo2() { printf "==> %s" "$1" >&2 ; }  # shows info about the next operation (to stderr)

SettingsCommon()
{
    [ $_COMMON_SETTINGS_VERBOSE = yes ] && echo "==> $FUNCNAME" >&2
    case "$-" in
        *i*)
            # history commands with arrow keys (on an interactive shell)
            bind '"\e[A":history-search-backward'      # up arrow
            bind '"\e[B":history-search-forward'       # down arrow

            bind 'set show-all-if-ambiguous on'        # complete with single TAB
            bind 'set mark-symlinked-directories on'   # complete directory symlinks with slash
            ;;
    esac
    shopt -s autocd

    EDITOR=emacs
    PAGER=less

    # Set in local ~/.bashrc:
    # ROOTDIR_EOS
    # ROOTDIR_MAN


    #############################################################
    # functions
    #############################################################

    Alias()
    {
        local name="$1"
        local def="$2"
        local force="$3"   # optional, values: "yes" "no" "", "" means "yes"
        local alias="builtin alias"

        [ "$force" = "" ] && force=yes

        if [ -n "$name" ] ; then
            if [ -n "$def" ] ; then
                if [ "$force" = "yes" ] ; then
                    $alias "$name"="$def"    # assign alias only if name is "free"
                    return
                fi
                local defold=$(LANG=C type "$name" 2>/dev/null | head -n1)
                if [ -z "$defold" ] ; then
                    $alias "$name"="$def"    # assign alias only if name is "free"
                    return
                fi
                [ $_COMMON_SETTINGS_VERBOSE_ALIAS = yes ] && echo "Warning: $FUNCNAME: Overriding old definition: '$defold'." >&2
            else
                $alias "$name"
            fi
        else
            $alias
        fi
    }
    AliasIf() {
        # make alias only if the app is available
        if type "$1" &>/dev/null ; then
            shift
            Alias "$@"
        else
            [ $_COMMON_SETTINGS_VERBOSE_ALIAS = yes ] && echo "==> $FUNCNAME: sorry, program '$1' not found" >&2
        fi
    }
    Unalias() { unalias "$1" 2>/dev/null ; }

    command_not_found_handle() {
        if [ -f "$1" ] ; then
            exo-open "$@" 2>/dev/null
        elif cd "$1" ; then
            echo "$FUNCNAME: did you mean 'cd $*'?" >&2    # cd is not working here...
        else
            echo "$FUNCNAME: '$*' not recognized." >&2
        fi
    }

    WaitForConnection() {     # wait at most given seconds (or 10), then return 0=connection OK or 1=connection fail
        local seconds="$1"
        [ -n "$seconds" ] || seconds=10
        local ix
        for ix in $(seq $seconds) ; do
            eos-connection-checker && { echo " done." >&2 ; return 0 ; }
            printf "." >&2
            sleep 1
        done
        return 1
    }

    sou() {                            # allow parameters to ~/.bashrc
        while true ; do
            case "$1" in
                *) break ;;
            esac
        done
        # NextInfo2 "Source ~/.bashrc ..."
        source ~/.bashrc "$@"
    }

    sudofuncs() {
        local tmpfile=$(mktemp)
        local name
        for name in "$@" ; do
            echo "$name() { sudo /usr/bin/$name \"\$@\" ; }" >> $tmpfile
        done
        source $tmpfile
        rm -f $tmpfile
    }


    Unalias type
    type() {
        # without parameters, show all aliases and functions
        case "$1" in
            "") { alias && declare -F ; } | less ;;
            *) builtin type -a "$@" ;;
        esac
    }

    -() { cd - ; }   # make plain - the same as "cd -"

    ..()
    {
        # cd to one of the parent folders, given number of levels (zero or more)
        # Example: .. 5

        local levels="$1"
        local -r levels_max=10000
        case "$levels" in
            "")
                levels=1
                ;;
            # [0-9] | [1-9]*([0-9]))     # assumes extglob is enabled! Note: emacs reformatting fails with this...
            #     ;;
            [0-9] | [1-9][0-9])
                if [ $levels -gt $levels_max ] ; then
                    echo "number of levels '$levels' must be less than $levels_max" >&2
                    return 1
                fi
                ;;
            *)
                echo "invalid number of levels: '$levels'" >&2
                return 1
                ;;
        esac
        local dir=$(seq $levels | awk '{printf "../"}')
        cd $dir
    }

    open-anything() { setsid exo-open "$@" 2>/dev/null ; }      # open any file (based on mime stuff)

    # Functions to modify PATH
    PathInsert() { echo "${PATH//:/$'\n'}" | grep "^$1$" >/dev/null || PATH="$1:$PATH" ; }   # adds $1 to begin
    PathAppend() { echo "${PATH//:/$'\n'}" | grep "^$1$" >/dev/null || PATH="$PATH:$1" ; }   # adds $1 to end
    PathRemove() {                                                                           # removed all occurrences of $1
        PATH=${PATH//$1/}    # remove all occurrences of $1
        PATH=${PATH//::/:}   # remove all ::
        PATH=${PATH#:}       # remove prefix :
        PATH=${PATH%:}       # remove suffix :
    }

    [ -x /bin/chdirex ] && cd() { builtin cd $(/bin/chdirex "$@") ; }

    lsd()   { find . -type d -exec ls -ld {} \; ; }

    drw()   {
        # shellcheck disable=SC2010
        ls -l "$@" | grep rw
    }

    lp()  { l  "$@" | less -F ; }   # show long listing but no hidden dotfiles except "."
    llp() { ll "$@" | less -F ; }   # show long listing of all except ".."

    lsblk() {
        local width=300
        local lsblk="/usr/bin/lsblk -w$width"

        if [ -z "$1" ] ; then
            $lsblk -f -o+SIZE
        else
            $lsblk "$@"
        fi
    }

    shutdown()  { [ -z "$1" ] && Power-routines poweroff  || /bin/shutdown "$@" ; }

    BannerLine() {
        local len="$1"
        local str="$2"
        local newlines="$3"                      # ^ = newline to head, $ = newline to tail (~like in grep)

        if [ -z "$len" ] ; then
            len=$((COLUMNS / 2))
        elif [ -n "$(echo "$len" | tr -d '[0-9]')" ] ; then
            echo "$FUNCNAME: first parameter is not a number" >&2
            return 1
        fi
        case "$str" in
            "" | default) str="=" ;;
        esac

        case "$newlines" in
            "^" | "^$") echo "" ;;
        esac
        printf "%.0s$str" $(seq $len)
        case "$newlines" in
            "^$" | "$" | "") echo "" ;;
        esac
    }
    BannerLine2() { BannerLine "$@" >&2 ; }

    _AdHocChecks_() {
        _DailyCheck_() {
            _SimpleUpdateCheck() {
                return    # 'checkupdates' may cause problems...

                NextInfo2 "Checking updates ... "
                local updates
                updates=$(checkupdates)
                case "$?" in
                    2)  echo "none." >&2
                        ;;
                    0)  echo "done:" >&2
                        local header="Name|vNow|vNew|Description"                                # header item names
                        local header_ul=$(echo "$header" | sed 's/[^|]/~/g')                     # underlining the above
                        local _line

                        updates=$(echo "$updates" | sed 's/ -> / /' | tr ' ' '|')                # remove every " ->" and change every ' ' to '|'
                        updates=$(
                            echo "$updates" | \
                                while read _line ; do
                                    echo "$_line" | sed "s/$/|$(expac -Q %d ${_line%%|*})/"      # append description to each line
                                done
                               )
                        updates="$(echo "$header"; echo "$header_ul"; echo "$updates")"          # add header
                        updates=$(echo "$updates" | column -t -s'|')                             # 'column' may change longest line length...
                        local maxlen=$(echo "$updates" | wc -L)                                  # find longest line length (for bannerline)
                        BannerLine $maxlen
                        echo "$updates"
                        BannerLine $maxlen
                        ;;
                esac
            }
            local daynr=$(date +%j)
            local daynrfile=$HOME/.daynr

            if [ "$daynr" != "$(cat $daynrfile 2>/dev/null)" ] ; then
                echo "$daynr" > $daynrfile
                _SimpleUpdateCheck | sed 's|^|    |'
            fi
        }
        _CheckAlways_() {
            if [ -z "$BASH_SETTINGS_FILE" ] ; then
                echo "warning: variable BASH_SETTINGS_FILE not set!" >&2
            fi
            if [ -x /usr/local/bin/pacman ] ; then
                echo "$BASH_SETTINGS_FILE:$FUNCNAME: warning: executable /usr/local/bin/pacman exists!" >&2
            fi
        }

        _CheckAlways_            # check always when terminal is initialized
        _DailyCheck_             # check once a day, when the first terminal is launched
    }
    _AdHocChecks_

    git_kuulas() {
        # preparations for doing a git command

        case "$1" in
            push)
                case "$(realpath .)" in
                    /UNI/lisa/repo/*)  logstuff on ;;
                esac
                ;;
            pull)
                case "$(realpath .)" in
                    /UNI/lisa/repo/Manuel/b-assets) logstuff on ;;
                    # /UNI/lisa/repo/Manuel/eos) ;;
                esac
                ;;
            add)
                # if args include local PKGBUILD and
                # if local PKGBUILD includes some sums and
                # if local PKGBUILD is not the newest file
                # then try update checksums

                if [ -n "$(printf "%s\n" "$@" | grep "^PKGBUILD$")" ] ; then
                    if [ -r PKGBUILD ] && [ -w PKGBUILD ] && grep -P "^sha.*sums=|^md5sums=|^b2sums=" PKGBUILD >& /dev/null ; then
                        if [ "$(/usr/bin/ls -a1tr --ignore=. --ignore=.. | tail -n1)" != PKGBUILD ] ; then
                            read -p "Update checksums (Y/n)? " >&2
                            case "$REPLY" in
                                "" | [yY]*) updpkgsums ;;
                            esac
                        fi
                    fi
                fi
                ;;
        esac
        /usr/bin/git "$@"
    }

    linktype() {
        local file="$1"
        local result=""

        [ -n "$file" ] || { echo "${FUNCNAME[0]}: give file parameter" >&2 ; return 1 ; }

        if [ -f "$file" ] ; then
            if [ -L "$file" ] ; then
                result="symlink"
            else
                case "$(stat -c %h "$file")" in
                    1) result="regular file" ;;
                    *) result="hardlink" ;;
                esac
            fi
        else
            result="not a regular file"
        fi
        echo "$result"
    }

    man() {                                                        # 'man' extended for some external apps
        man-eos-apps-info-helper() {
            #echo "==> $FUNCNAME:" >&2
            which eos-apps-info-helper &> /dev/null || return 1
            eos-apps-info-helper "$@"
        }
        man-plain-help() {
            if which "$1" &> /dev/null ; then
                echo "==> $FUNCNAME:" >&2
                "$@" --help
            else
                echo "$FUNCNAME: no info about '$1'." >&2
            fi
        }

        /bin/man "$@" && return                                    # try normal man first
        case "$?" in
            16)
                man-eos-apps-info-helper "$@"                      # man failed, handle exit code 16 for unknown app
                case "$?" in
                    0) ;;
                    *) man-plain-help "$@" ;;
                esac
                ;;
        esac
    }

    my_prompt_command() {
        # Show one or two line prompt (folder, time) after trying to slightly shorten the folder name.

        local pwd=${PWD/$HOME/\~}             # shorten for $HOME
        local time="$(date +%a\ %H:%M.%S)"

        if [ -n "$HERE_ARROW" ] ; then
            local rarrow=')'
            local larrow='('
            local here="$HERE_ARROW"
        else
            local rarrow=$'\u2773'            # nice delimiters, https://en.wikipedia.org/wiki/Arrow_(symbol)#Unicode
            local larrow=$'\u2772'
            local here=$'\u2ba9'
        fi

        pwd="$larrow$pwd$rarrow"

        if [ ${#pwd} -gt $((COLUMNS / 2)) ] ; then
            printf -v PS1 "%s\n%s %s "  "$pwd" "$time" "$here"   # two line prompt
        else
            printf -v PS1 "%11s %s %s " "$time" "$pwd" "$here"   # one line prompt
        fi
    }

    md() {
        # Usage: md name.md
        local file="$1"
        local usage="Usage: $FUNCNAME md-file"

        if [ -z "$file" ] ; then
            echo "$usage" >&2
            return 1
        fi

        # output with an md viewer
        local prog
        for prog in ghostwriter # vscodium code-oss code
        do
            if [ -x /bin/$prog ] ; then
                echo "opening with ghostwriter..." >&2
                $prog "$file"
                return
            fi
        done

        # output viewer is a browser
        if [ -x /bin/pandoc ] ; then
            echo "converting with pandoc..." >&2
            local tmp="$(mktemp /tmp/tmp.$(basename "$file").XXXXX.html)"
            pandoc -f gfm -t html "$file" > "$tmp" || return 1
            if [ -r "$tmp" ] ; then
                exo-open "file://$tmp" &>/dev/null
                sleep 5   # must wait because exo-open does not
                rm -f "$tmp"
            fi
            return
        fi

        echo "$FUNCNAME: sorry, ghostwriter or pandoc is needed but not installed." >&2
        return 1
    }

    p() {
        local args=("$@")
        local basecmd="pacman-ext --extras --expac --no-banner"
        case "$1" in
            "") args=(-Syu) ;;
        esac
        $basecmd "${args[@]}"
    }

    #pf() { pgrep -a "$@" ; } # list processes

    IsNum() { [ -n "$1" ] && [ -z "${1//[0-9]/}" ] ; }

    rate-mirrors-arch() {
        local delay=70        # --delay=Y
        local count=2         # --count=X

        while [ -n "$1" ] ; do
            case "$1" in
                --count=* | -c=*) count=${1#*=} ;;
                --count   | -c  ) count="$2"; shift ;;
                --delay=* | -d=*) delay=${1#*=} ;;
                --delay   | -d  ) delay="$2"; shift ;;
                *) echo "$FUNCNAME: parameter '$1' unrecognized" >&2; return 1 ;;
            esac
            shift
        done

        IsNum "$delay" || { echo "$FUNCNAME: parameter '$delay' of --delay unrecognized" >&2; return 1; }
        IsNum "$count" || { echo "$FUNCNAME: parameter '$count' of --count unrecognized" >&2; return 1; }

        local cmd=(
            rate-mirrors
            #--disable-comments
            --disable-comments-in-file
            --protocol https
            --save /tmp/mirrorlist
            --entry-country DE
            --country-test-mirrors-per-country $count
            --country-neighbors-per-country 0
            arch
            --max-delay=$delay
        )
        "${cmd[@]}" | grep -v "^Server = "
        printf "\n" >&2
        local banner=$(BannerLine 70 '~')
        echo "$banner" >&2
        grep "^# ARGS: " /tmp/mirrorlist
        cat /tmp/mirrorlist
        echo "$banner" >&2
    }

    R() {
        # If needed, build packages.

        local repodir=""
        local op=""
        local dir1 dir2 dirs

        while [ -n "$1" ] ; do
            case "$1" in
                -h | --help)
                    cat <<EOF >&2

Build packages if needed.

Usage: $FUNCNAME [options]

Options:
    -h, --help        This help.
    -n, ""            Check if build is needed, using local packages.
    -nn               Check if build is needed, using remote packages.
    -b                Directly try to build packages.
EOF
                    return
                    ;;
                -*) op="$1" ;;
                *)  repodir="$1" ;;
            esac
            shift
        done

        for dir1 in "${CDPATH_ARR[@]}" ; do
            case "$dir1" in
                */_BUILD_)
                    dirs=("$dir1"/*)
                    for dir2 in "${dirs[@]}" ; do
                        case "$repodir" in
                            "" | .) repodir="$PWD" ;;
                        esac
                        case "$repodir" in
                            /*)
                                if [ "$repodir" -ef "$dir2" ] ; then
                                    repodir="$dir2"
                                    break 2
                                fi
                                ;;
                            *)
                                case "$dir2" in
                                    */"$repodir")
                                        repodir="$dir2"
                                        break 2
                                        ;;
                                esac
                                ;;
                        esac
                    done
                    ;;
            esac
        done
        case "$op" in
            "") op="-n" ;;                # ""  = check local
            -n | -nn) ;;                  # -n  = check local
                                          # -nn = check remote
            -b) op="" ;;                  # -b  = build
            *)
                echo "$FUNCNAME: wrong option!" >&2
                $FUNCNAME -h
                return 1
                ;;
        esac

        local cwd="$PWD"
        local exit_code=0

        if [ -n "$repodir" ] ; then
            cd $repodir || return 1
        fi
        assets.make $op
        exit_code=$?
        cd "$cwd"
        case $exit_code in
            100 | 0) ;;
            *)       return $exit_code ;;
        esac
    }

    if false ; then
    rc() {
        local cmd="$1"    # default: -n
        local dir="$2"    # default: .

        [ -n "$dir" ] || dir=.

        case "$cmd" in
            "" | -n | -nl | --dryrun-local) cmd="--dryrun-local" ;;
            -nn | -nr | --dryrun)           cmd="--dryrun" ;;
            --build)                        cmd="" ;;
            --repoup | --aurdiff | -ad | --allow.downgrade) ;;
            *)
                echo "$FUNCNAME: error: unsupported parameter '$cmd'" >&2
                return 1 ;;
        esac
        cd "$dir"
        assets.make $cmd
    }
    fi

    _Check_CDPATH_ARR() {  # CDPATH_ARR should contain unique folders
        local arrout=()
        local dir added

        for dir in "${CDPATH_ARR[@]}" ; do
            for added in "${arrout[@]}" ; do
                if [ "$dir" = "$added" ] ; then
                    echo "$FUNCNAME: warning: already added '$dir = $added'" >&2
                    continue 2
                fi
                if [ "$added" != "." ] && [ "$dir" != "." ] && [ "$dir" -ef "$added" ] ; then
                    echo "$FUNCNAME: warning: already added '$dir -ef $added'" >&2
                    continue 2
                fi
            done
            arrout+=("$dir")
        done
        # echo "orig = ${#CDPATH_ARR[@]}" >&2
        export CDPATH_ARR=("${arrout[@]}")
        # echo "new  = ${#CDPATH_ARR[@]}" >&2
    }
    _Check_CDPATH_ARR

    xfce4-terminal() {
        /bin/xfce4-terminal --geometry=150x25 "$@"
    }

    sudofuncs fstrim mount umount


    #############################################################
    # variables
    #############################################################

    [ -z "$FUNCNEST" ] && export FUNCNEST=100

    PROMPT_COMMAND=(my_prompt_command)

    export HISTCONTROL="erasedups"
    FIGNORE=".o:~"                      # ignored suffixes in filename completion

    CDPATH="${CDPATH_ARR[*]}"
    CDPATH="${CDPATH// /:}"
    export CDPATH

    #############################################################
    # aliases
    #############################################################

    [ $_COMMON_SETTINGS_VERBOSE = yes ] && echo "==> $FUNCNAME: aliases" >&2

    Alias bat                "bat --style=number"
    Alias pacman-branch      "pacman-conf --repo-list | grep '^testing$' || echo stable"
    Alias ci                 "ci -u"
    Alias cls                "clear"
    Alias curly              "curl --remote-name-all"
    Alias df                 "LANG=C df -hT"
    Alias forum              "firefox https://forum.endeavouros.com/login"
    Alias h                  "history | fzf --tac --no-separator --no-info"
    Alias history-del        "history -c && history -w"
    Alias hlp                "eos-apps-info-helper"
    Alias inxi               "inxi -z"
    Alias local-repo-manager "local-repo-manager -v"
    Alias ls                 "ls --color=auto -F"
    Alias nano               "nano -l"
    Alias o                  "open-anything"
    Alias package-sizes      "expac -HM -Q '%m|%n' | column -t -s'|' | sort -nr | less"  # M is reasonable now, later G might be too
    Alias pp                 "p -j"
    Alias pacdiff            "eos-pacdiff"
    Alias paq                "sudo paq"
    Alias ramsleep           "Power-routines suspend"
    Alias welcome            "setsid eos-welcome --once"

    AliasIf grub-mkconfig  grub.cfg    "sudo grub-mkconfig -o /boot/grub/grub.cfg"
    AliasIf grub-mkconfig  update-grub grub.cfg
    AliasIf meld-rcs       meld        "setsid meld-rcs"

    if true ; then
        Alias cp         "cp -i"
        Alias ln         "ln -i"
        Alias mv         "mv -i"
        Alias rm         "rm -i"
    fi

    if which logstuff &> /dev/null ; then
        Alias reboot    'logstuff off && sync && Power-routines reboot'
        Alias poweroff  'logstuff off && sync && Power-routines poweroff'
    else
        Alias reboot    "sync && reboot"
        Alias poweroff  "sync && poweroff"
    fi

    #############################################################
    # bash completions
    #############################################################

    [ $_COMMON_SETTINGS_VERBOSE = yes ] && echo "==> $FUNCNAME: bash completions" >&2

    LoadCompletion() {
        local cmdname="$1"
        local compname="$2"
        local compfunc="$3"   # optional

        [ -r /usr/share/bash-completion/completions/$compname ] || return 1

        [ -n "$compfunc" ] || compfunc="_${compname}_"

        complete | grep "\-F" | grep " $cmdname$" >/dev/null || {
            # echo "loading $compfunc completion" >&2
            source /usr/share/bash-completion/completions/$compname
            complete -F $compfunc $cmdname
        }
    }

    #              new cmdname          pkgname     completion func
    LoadCompletion pacman-sudo-internal pacman      _pacman
    LoadCompletion p                    pacman-ext  _pacman-ext_
    LoadCompletion R                   pkgcheck    _pkgcheck_


    [ -r ~/.dircolors ] && eval "$(dircolors ~/.dircolors)"

    NiceFuncRun() {
        local app="$1"
        local firstpara="$2"
        shift

        if [ -x /bin/$app ]; then
            case "$firstpara" in 
                -h | --help*) /bin/$app "$@" 2> /dev/null ;;
                *)            setsid /bin/$app "$@" &> /dev/null ;;
            esac
        else
            command $app
        fi
    }

    AppsToFuncsMaker() {
        local apps=(
            adie                             # lightning fast editor
            # audacity
            # bluefish
            # chromium
            dolphin
            eog
            firefox
            firefox-developer-edition
            # geany
            # gedit
            ghostwriter
            gitk
            # gnome-boxes
            # gnome-builder
            kate
            # kdevelop
            konsole
            libreoffice
            # mousepad
            # notepadqq
            pamac-manager
            parole
            qterminal
            ristretto
            soffice
            terminator
            thunderbird
            xed
            xfce4-screenshooter
            xplayer
            xreader

            # eclipse
            # tkdiff
        )
        apps+=(        # here for other reasons!
            kaffeine
            # krusader
            # vivaldi-stable
        )

        if [ ${#apps[@]} -gt 0 ] ; then
            local pr
            local tmpfile=$(mktemp)

            for pr in "${apps[@]}" ; do
                Unalias $pr
                which $pr &> /dev/null && echo "$pr() { NiceFuncRun $pr \"\$@\" ; }"
            done >> $tmpfile

            # shellcheck disable=SC1090
            source $tmpfile
            rm -f $tmpfile
        fi
    }
    AppsToFuncsMaker
    unset -f AppsToFuncsMaker

    [ -f ~/unison.log ] && rm -i ~/unison.log
}


bashrc() { # load updated bash settings
    case "$1" in
        --update)
            NextInfo2 "Updating settings ..."
            if WaitForConnection 10 ; then
                pushd $(dirname "$BASH_SOURCE") >/dev/null && git pull >/dev/null
                popd >/dev/null
                echo " done." >&2
                return
            else
                printf "\n==> Sorry, no internet connection, update failed.\n" >&2
            fi

            if false ; then
                for _ix in {1..10} ; do
                    if eos-connection-checker ; then
                        pushd $(dirname "$BASH_SOURCE") >/dev/null && git pull >/dev/null
                        popd >/dev/null
                        echo " done." >&2
                        return
                    fi
                    printf "."
                    sleep 1
                done
                printf "\n==> Sorry, no internet connection, update failed.\n" >&2
            fi
            ;;
        --plain)
            _COMMON_SETTINGS_VERBOSE=no           # common verbosity
            _COMMON_SETTINGS_VERBOSE_ALIAS=no     # verbosity specific to Alias()
            case "$1" in
                --verbose)       _COMMON_SETTINGS_VERBOSE=yes ;;
                --verbose-alias) _COMMON_SETTINGS_VERBOSE_ALIAS=yes ;;
            esac
            source ~/.config/cd-extended.conf && SettingsCommon
            ;;
        *)
            bashrc --update
            bashrc --plain
            echo "==> bash settings updated." >&2
            ;;
    esac
}

# Use current settings now. Update settings with 'bashrc'.
bashrc --plain
echo "==> 'bashrc' updates bash settings." >&2
